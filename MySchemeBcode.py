{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Reproduce results of Scheme B\n",
    "\n",
    "Paper: \"Statistical supervised meta-ensemble algorithm for data linkage\"\n",
    "\n",
    "Kha Vo, Jitendra Jonnagaddala, Siaw-Teng Liaw\n",
    "\n",
    "February 2019\n",
    "\n",
    "Jounal of Biomedical Informatics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "trainset = 'ePBRN_F_dup' \n",
    "testset = 'ePBRN_D_dup'\n",
    "\n",
    "import recordlinkage as rl, pandas as pd, numpy as np\n",
    "from sklearn.model_selection import KFold\n",
    "from sklearn import svm\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "from sklearn.neural_network import MLPClassifier\n",
    "from sklearn.utils import shuffle\n",
    "from recordlinkage.preprocessing import phonetic\n",
    "from numpy.random import choice\n",
    "import collections, numpy\n",
    "from IPython.display import clear_output\n",
    "from sklearn.model_selection import train_test_split, KFold\n",
    "\n",
    "\n",
    "def generate_true_links(df): \n",
    "    # although the match_id column is included in the original df to imply the true links,\n",
    "    # this function will create the true_link object identical to the true_links properties\n",
    "    # of recordlinkage toolkit, in order to exploit \"Compare.compute()\" from that toolkit\n",
    "    # in extract_function() for extracting features quicker.\n",
    "    # This process should be deprecated in the future release of the UNSW toolkit.\n",
    "    df[\"rec_id\"] = df.index.values.tolist()\n",
    "    indices_1 = []\n",
    "    indices_2 = []\n",
    "    processed = 0\n",
    "    for match_id in df[\"match_id\"].unique():\n",
    "        if match_id != -1:    \n",
    "            processed = processed + 1\n",
    "            # print(\"In routine generate_true_links(), count =\", processed)\n",
    "            # clear_output(wait=True)\n",
    "            linkages = df.loc[df['match_id'] == match_id]\n",
    "            for j in range(len(linkages)-1):\n",
    "                for k in range(j+1, len(linkages)):\n",
    "                    indices_1 = indices_1 + [linkages.iloc[j][\"rec_id\"]]\n",
    "                    indices_2 = indices_2 + [linkages.iloc[k][\"rec_id\"]]    \n",
    "    links = pd.MultiIndex.from_arrays([indices_1,indices_2])\n",
    "    return links\n",
    "\n",
    "def generate_false_links(df, size):\n",
    "    # A counterpart of generate_true_links(), with the purpose to generate random false pairs\n",
    "    # for training. The number of false pairs in specified as \"size\".\n",
    "    df[\"rec_id\"] = df.index.values.tolist()\n",
    "    indices_1 = []\n",
    "    indices_2 = []\n",
    "    unique_match_id = df[\"match_id\"].unique()\n",
    "    unique_match_id = unique_match_id[~np.isnan(unique_match_id)] # remove nan values\n",
    "    for j in range(size):\n",
    "            false_pair_ids = choice(unique_match_id, 2)\n",
    "            candidate_1_cluster = df.loc[df['match_id'] == false_pair_ids[0]]\n",
    "            candidate_1 = candidate_1_cluster.iloc[choice(range(len(candidate_1_cluster)))]\n",
    "            candidate_2_cluster = df.loc[df['match_id'] == false_pair_ids[1]]\n",
    "            candidate_2 = candidate_2_cluster.iloc[choice(range(len(candidate_2_cluster)))]    \n",
    "            indices_1 = indices_1 + [candidate_1[\"rec_id\"]]\n",
    "            indices_2 = indices_2 + [candidate_2[\"rec_id\"]]  \n",
    "    links = pd.MultiIndex.from_arrays([indices_1,indices_2])\n",
    "    return links\n",
    "\n",
    "def swap_fields_flag(f11, f12, f21, f22):\n",
    "    return ((f11 == f22) & (f12 == f21)).astype(float)\n",
    "\n",
    "def join_names_space(f11, f12, f21, f22):\n",
    "    return ((f11+\" \"+f12 == f21) | (f11+\" \"+f12 == f22)| (f21+\" \"+f22 == f11)| (f21+\" \"+f22 == f12)).astype(float)\n",
    "\n",
    "def join_names_dash(f11, f12, f21, f22):\n",
    "    return ((f11+\"-\"+f12 == f21) | (f11+\"-\"+f12 == f22)| (f21+\"-\"+f22 == f11)| (f21+\"-\"+f22 == f12)).astype(float)\n",
    "\n",
    "def abb_surname(f1, f2):\n",
    "    return ((f1[0]==f2) | (f1==f2[0])).astype(float)\n",
    "\n",
    "def reset_day(f11, f12, f21, f22):\n",
    "    return (((f11 == 1) & (f12 == 1))|((f21 == 1) & (f22 == 1))).astype(float)\n",
    "\n",
    "def extract_features(df, links):\n",
    "    c = rl.Compare()\n",
    "    c.string('given_name', 'given_name', method='levenshtein', label='y_name_leven')\n",
    "    c.string('surname', 'surname', method='levenshtein', label='y_surname_leven')  \n",
    "    c.string('given_name', 'given_name', method='jarowinkler', label='y_name_jaro')\n",
    "    c.string('surname', 'surname', method='jarowinkler', label='y_surname_jaro')  \n",
    "    c.string('postcode', 'postcode', method='jarowinkler', label='y_postcode')   \n",
    "    c.string('soc_sec_id', 'soc_sec_id', method='jarowinkler', label='y_soc_sec_id') \n",
    "    exact_fields = ['postcode', 'address_1', 'address_2', 'street_number','soc_sec_id']\n",
    "    for field in exact_fields:\n",
    "        c.exact(field, field, label='y_'+field+'_exact')\n",
    "    c.compare_vectorized(reset_day,('day', 'month'), ('day', 'month'),label='reset_day_flag')    \n",
    "    c.compare_vectorized(swap_fields_flag,('day', 'month'), ('day', 'month'),label='swap_day_month')    \n",
    "    c.compare_vectorized(swap_fields_flag,('surname', 'given_name'), ('surname', 'given_name'),label='swap_names')    \n",
    "    c.compare_vectorized(join_names_space,('surname', 'given_name'), ('surname', 'given_name'),label='join_names_space')\n",
    "    c.compare_vectorized(join_names_dash,('surname', 'given_name'), ('surname', 'given_name'),label='join_names_dash')\n",
    "    c.compare_vectorized(abb_surname,'surname', 'surname',label='abb_surname')\n",
    "    c.compare_vectorized(abb_surname,'soc_sec_id', 'soc_sec_id',label='soc_sec_id')\n",
    "    # Build features\n",
    "    feature_vectors = c.compute(links, df, df)\n",
    "    return feature_vectors\n",
    "\n",
    "def generate_train_X_y(df):\n",
    "    # This routine is to generate the feature vector X and the corresponding labels y\n",
    "    # with exactly equal number of samples for both classes to train the classifier.\n",
    "    pos = extract_features(df, train_true_links)\n",
    "    train_false_links = generate_false_links(df, len(train_true_links))    \n",
    "    neg = extract_features(df, train_false_links)\n",
    "    X = pos.values.tolist() + neg.values.tolist()\n",
    "    y = [1]*len(pos)+[0]*len(neg)\n",
    "    X, y = shuffle(X, y, random_state=0)\n",
    "    X = np.array(X)\n",
    "    y = np.array(y)\n",
    "    return X, y\n",
    "\n",
    "def train_model(modeltype, modelparam, train_vectors, train_labels, modeltype_2):\n",
    "    if modeltype == 'svm': # Support Vector Machine\n",
    "        model = svm.SVC(C = modelparam, kernel = modeltype_2)\n",
    "        model.fit(train_vectors, train_labels) \n",
    "    elif modeltype == 'lg': # Logistic Regression\n",
    "        model = LogisticRegression(C=modelparam, penalty = modeltype_2,class_weight=None, dual=False, fit_intercept=True, \n",
    "                                   intercept_scaling=1, max_iter=5000, multi_class='ovr', \n",
    "                                   n_jobs=1, random_state=None)\n",
    "        model.fit(train_vectors, train_labels)\n",
    "    elif modeltype == 'nb': # Naive Bayes\n",
    "        model = GaussianNB()\n",
    "        model.fit(train_vectors, train_labels)\n",
    "    elif modeltype == 'nn': # Neural Network\n",
    "        model = MLPClassifier(solver='lbfgs', alpha=modelparam, hidden_layer_sizes=(256, ), \n",
    "                              activation = modeltype_2,random_state=None, batch_size='auto', \n",
    "                              learning_rate='constant',  learning_rate_init=0.001, \n",
    "                              power_t=0.5, max_iter=30000, shuffle=True, \n",
    "                              tol=0.0001, verbose=False, warm_start=False, momentum=0.9, \n",
    "                              nesterovs_momentum=True, early_stopping=False, \n",
    "                              validation_fraction=0.1, beta_1=0.9, beta_2=0.999, epsilon=1e-08)\n",
    "        model.fit(train_vectors, train_labels)\n",
    "    return model\n",
    "\n",
    "def classify(model, test_vectors):\n",
    "    result = model.predict(test_vectors)\n",
    "    return result\n",
    "\n",
    "    \n",
    "def evaluation(test_labels, result):\n",
    "    true_pos = np.logical_and(test_labels, result)\n",
    "    count_true_pos = np.sum(true_pos)\n",
    "    true_neg = np.logical_and(np.logical_not(test_labels),np.logical_not(result))\n",
    "    count_true_neg = np.sum(true_neg)\n",
    "    false_pos = np.logical_and(np.logical_not(test_labels), result)\n",
    "    count_false_pos = np.sum(false_pos)\n",
    "    false_neg = np.logical_and(test_labels,np.logical_not(result))\n",
    "    count_false_neg = np.sum(false_neg)\n",
    "    precision = count_true_pos/(count_true_pos+count_false_pos)\n",
    "    sensitivity = count_true_pos/(count_true_pos+count_false_neg) # sensitivity = recall\n",
    "    confusion_matrix = [count_true_pos, count_false_pos, count_false_neg, count_true_neg]\n",
    "    no_links_found = np.count_nonzero(result)\n",
    "    no_false = count_false_pos + count_false_neg\n",
    "    Fscore = 2*precision*sensitivity/(precision+sensitivity)\n",
    "    metrics_result = {'no_false':no_false, 'confusion_matrix':confusion_matrix ,'precision':precision,\n",
    "                     'sensitivity':sensitivity ,'no_links':no_links_found, 'F-score': Fscore}\n",
    "    return metrics_result\n",
    "\n",
    "def blocking_performance(candidates, true_links, df):\n",
    "    count = 0\n",
    "    for candi in candidates:\n",
    "        if df.loc[candi[0]][\"match_id\"]==df.loc[candi[1]][\"match_id\"]:\n",
    "            count = count + 1\n",
    "    return count"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Import train set...\n",
      "Train set size: 14093 , number of matched pairs:  3218\n",
      "Finished building X_train, y_train\n"
     ]
    }
   ],
   "source": [
    "## TRAIN SET CONSTRUCTION\n",
    "\n",
    "# Import\n",
    "print(\"Import train set...\")\n",
    "df_train = pd.read_csv(trainset+\".csv\", index_col = \"rec_id\")\n",
    "\n",
    "train_true_links = generate_true_links(df_train)\n",
    "print(\"Train set size:\", len(df_train), \", number of matched pairs: \", str(len(train_true_links)))\n",
    "\n",
    "# Preprocess train set\n",
    "df_train['postcode'] = df_train['postcode'].astype(str)\n",
    "df_train['soc_sec_id'] = df_train['soc_sec_id'].astype(str)\n",
    "\n",
    "# Final train feature vectors and labels\n",
    "X_train, y_train = generate_train_X_y(df_train)\n",
    "print(\"Finished building X_train, y_train\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Import test set...\n",
      "Test set size: 11743 , number of matched pairs:  2683\n",
      "BLOCKING PERFORMANCE:\n",
      "Number of pairs of matched given_name: 254788 , detected  1640 /2683 true matched pairs, missed 1043\n",
      "Number of pairs of matched surname: 33070 , detected  1500 /2683 true matched pairs, missed 1183\n",
      "Number of pairs of matched postcode: 80688 , detected  2507 /2683 true matched pairs, missed 176\n",
      "Number of pairs of at least 1 field matched: 365042 , detected  2628 /2683 true matched pairs, missed 55\n"
     ]
    }
   ],
   "source": [
    "# Blocking Criteria: declare non-match of all of the below fields disagree\n",
    "# Import\n",
    "print(\"Import test set...\")\n",
    "df_test = pd.read_csv(testset+\".csv\", index_col = \"rec_id\")\n",
    "test_true_links = generate_true_links(df_test)\n",
    "leng_test_true_links = len(test_true_links)\n",
    "print(\"Test set size:\", len(df_test), \", number of matched pairs: \", str(leng_test_true_links))\n",
    "\n",
    "print(\"BLOCKING PERFORMANCE:\")\n",
    "\n",
    "blocking_fields = [\"given_name\", \"surname\", \"postcode\"]\n",
    "all_candidate_pairs = []\n",
    "for field in blocking_fields:\n",
    "    block_indexer = rl.BlockIndex(on=field)\n",
    "    candidates = block_indexer.index(df_test)\n",
    "    detects = blocking_performance(candidates, test_true_links, df_test)\n",
    "    all_candidate_pairs = candidates.union(all_candidate_pairs)\n",
    "    print(\"Number of pairs of matched \"+ field +\": \"+str(len(candidates)), \", detected \",\n",
    "         detects,'/'+ str(leng_test_true_links) + \" true matched pairs, missed \" + \n",
    "          str(leng_test_true_links-detects) )\n",
    "detects = blocking_performance(all_candidate_pairs, test_true_links, df_test)\n",
    "print(\"Number of pairs of at least 1 field matched: \" + str(len(all_candidate_pairs)), \", detected \",\n",
    "     detects,'/'+ str(leng_test_true_links) + \" true matched pairs, missed \" + \n",
    "          str(leng_test_true_links-detects) )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Processing test set...\n",
      "Preprocess...\n",
      "Extract feature vectors...\n",
      "Count labels of y_test: Counter({0: 362414, 1: 2628})\n",
      "Finished building X_test, y_test\n"
     ]
    }
   ],
   "source": [
    "## TEST SET CONSTRUCTION\n",
    "\n",
    "# Preprocess test set\n",
    "print(\"Processing test set...\")\n",
    "print(\"Preprocess...\")\n",
    "df_test['postcode'] = df_test['postcode'].astype(str)\n",
    "df_test['soc_sec_id'] = df_test['soc_sec_id'].astype(str)\n",
    "\n",
    "# Test feature vectors and labels construction\n",
    "print(\"Extract feature vectors...\")\n",
    "df_X_test = extract_features(df_test, all_candidate_pairs)\n",
    "vectors = df_X_test.values.tolist()\n",
    "labels = [0]*len(vectors)\n",
    "feature_index = df_X_test.index\n",
    "for i in range(0, len(feature_index)):\n",
    "    if df_test.loc[feature_index[i][0]][\"match_id\"]==df_test.loc[feature_index[i][1]][\"match_id\"]:\n",
    "        labels[i] = 1\n",
    "X_test, y_test = shuffle(vectors, labels, random_state=0)\n",
    "X_test = np.array(X_test)\n",
    "y_test = np.array(y_test)\n",
    "print(\"Count labels of y_test:\",collections.Counter(y_test))\n",
    "print(\"Finished building X_test, y_test\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "BASE LEARNERS CLASSIFICATION PERFORMANCE:\n",
      "Model: svm , Param_1: linear , tuning range: [0.001, 0.002, 0.005, 0.01, 0.02, 0.05, 0.1, 0.2, 0.5, 1, 5, 10, 20, 50, 100, 200, 500, 1000, 2000, 5000]\n",
      "No_false: [32, 60, 87, 89, 125, 66, 58, 67, 68, 27, 240, 492, 492, 492, 492, 492, 492, 492, 492, 492] \n",
      "\n",
      "Precision: [0.989811320754717, 0.9780342516753537, 0.9683007740508662, 0.9672432830327568, 0.9549254816430389, 0.9755011135857461, 0.9784065524944154, 0.975139146567718, 0.9747774480712166, 0.9898305084745763, 0.9166085136078158, 0.8425272610647851, 0.8425272610647851, 0.8425272610647851, 0.8425272610647851, 0.8425272610647851, 0.8425272610647851, 0.8425272610647851, 0.8425272610647851, 0.8425272610647851] \n",
      "\n",
      "Sensitivity: [0.9980974124809742, 0.9996194824961948, 0.9996194824961948, 1.0, 0.9996194824961948, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9996194824961948, 0.9996194824961948, 0.9996194824961948, 0.9996194824961948, 0.9996194824961948, 0.9996194824961948, 0.9996194824961948, 0.9996194824961948, 0.9996194824961948, 0.9996194824961948] \n",
      "\n",
      "F-score: [0.9939370973853733, 0.988709070380128, 0.983710915558884, 0.9833489242282508, 0.9767614798289646, 0.9875986471251409, 0.9890854347007904, 0.987413112906256, 0.9872276483846731, 0.9948892674616696, 0.9563159810702585, 0.9143752175426384, 0.9143752175426384, 0.9143752175426384, 0.9143752175426384, 0.9143752175426384, 0.9143752175426384, 0.9143752175426384, 0.9143752175426384, 0.9143752175426384] \n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "## BASE LEARNERS CLASSIFICATION AND EVALUATION\n",
    "# Choose model\n",
    "print(\"BASE LEARNERS CLASSIFICATION PERFORMANCE:\")\n",
    "modeltype = 'svm' # choose between 'svm', 'lg', 'nn'\n",
    "modeltype_2 = 'linear'  # 'linear' or 'rbf' for svm, 'l1' or 'l2' for lg, 'relu' or 'logistic' for nn\n",
    "modelparam_range = [.001,.002,.005,.01,.02,.05,.1,.2,.5,1,5,10,20,50,100,200,500,1000,2000,5000] # C for svm, C for lg, alpha for NN\n",
    "\n",
    "print(\"Model:\",modeltype,\", Param_1:\",modeltype_2, \", tuning range:\", modelparam_range)\n",
    "precision = []\n",
    "sensitivity = []\n",
    "Fscore = []\n",
    "nb_false = []\n",
    "\n",
    "for modelparam in modelparam_range:\n",
    "    md = train_model(modeltype, modelparam, X_train, y_train, modeltype_2)\n",
    "    final_result = classify(md, X_test)\n",
    "    final_eval = evaluation(y_test, final_result)\n",
    "    precision += [final_eval['precision']]\n",
    "    sensitivity += [final_eval['sensitivity']]\n",
    "    Fscore += [final_eval['F-score']]\n",
    "    nb_false  += [final_eval['no_false']]\n",
    "    \n",
    "print(\"No_false:\",nb_false,\"\\n\")\n",
    "print(\"Precision:\",precision,\"\\n\")\n",
    "print(\"Sensitivity:\",sensitivity,\"\\n\")\n",
    "print(\"F-score:\", Fscore,\"\\n\")\n",
    "print(\"\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "BAGGING PERFORMANCE:\n",
      "\n",
      "svm per fold:\n",
      "Fold 0 {'no_false': 330, 'confusion_matrix': [2625, 327, 3, 362087], 'precision': 0.8892276422764228, 'sensitivity': 0.9988584474885844, 'no_links': 2952, 'F-score': 0.9408602150537634}\n",
      "Fold 1 {'no_false': 367, 'confusion_matrix': [2626, 365, 2, 362049], 'precision': 0.8779672350384486, 'sensitivity': 0.9992389649923896, 'no_links': 2991, 'F-score': 0.9346858871685353}\n",
      "Fold 2 {'no_false': 378, 'confusion_matrix': [2626, 376, 2, 362038], 'precision': 0.8747501665556295, 'sensitivity': 0.9992389649923896, 'no_links': 3002, 'F-score': 0.9328596802841919}\n",
      "Fold 3 {'no_false': 370, 'confusion_matrix': [2626, 368, 2, 362046], 'precision': 0.8770875083500334, 'sensitivity': 0.9992389649923896, 'no_links': 2994, 'F-score': 0.9341871220206331}\n",
      "Fold 4 {'no_false': 347, 'confusion_matrix': [2626, 345, 2, 362069], 'precision': 0.8838774823291821, 'sensitivity': 0.9992389649923896, 'no_links': 2971, 'F-score': 0.938024647258439}\n",
      "Fold 5 {'no_false': 400, 'confusion_matrix': [2626, 398, 2, 362016], 'precision': 0.8683862433862434, 'sensitivity': 0.9992389649923896, 'no_links': 3024, 'F-score': 0.9292285916489739}\n",
      "Fold 6 {'no_false': 347, 'confusion_matrix': [2627, 346, 1, 362068], 'precision': 0.8836192398250925, 'sensitivity': 0.9996194824961948, 'no_links': 2973, 'F-score': 0.9380467773611855}\n",
      "Fold 7 {'no_false': 406, 'confusion_matrix': [2627, 405, 1, 362009], 'precision': 0.866424802110818, 'sensitivity': 0.9996194824961948, 'no_links': 3032, 'F-score': 0.9282685512367491}\n",
      "Fold 8 {'no_false': 379, 'confusion_matrix': [2627, 378, 1, 362036], 'precision': 0.8742096505823628, 'sensitivity': 0.9996194824961948, 'no_links': 3005, 'F-score': 0.9327179123025031}\n",
      "Fold 9 {'no_false': 402, 'confusion_matrix': [2627, 401, 1, 362013], 'precision': 0.8675693527080581, 'sensitivity': 0.9996194824961948, 'no_links': 3028, 'F-score': 0.9289250353606789}\n",
      "svm bagging: {'no_false': 373, 'confusion_matrix': [2626, 371, 2, 362043], 'precision': 0.8762095428762096, 'sensitivity': 0.9992389649923896, 'no_links': 2997, 'F-score': 0.9336888888888889}\n",
      "\n",
      "nn per fold:\n",
      "Fold 0 {'no_false': 58, 'confusion_matrix': [2601, 31, 27, 362383], 'precision': 0.9882218844984803, 'sensitivity': 0.9897260273972602, 'no_links': 2632, 'F-score': 0.9889733840304181}\n",
      "Fold 1 {'no_false': 63, 'confusion_matrix': [2602, 37, 26, 362377], 'precision': 0.9859795377036756, 'sensitivity': 0.9901065449010654, 'no_links': 2639, 'F-score': 0.9880387317258401}\n",
      "Fold 2 {'no_false': 63, 'confusion_matrix': [2602, 37, 26, 362377], 'precision': 0.9859795377036756, 'sensitivity': 0.9901065449010654, 'no_links': 2639, 'F-score': 0.9880387317258401}\n",
      "Fold 3 {'no_false': 65, 'confusion_matrix': [2602, 39, 26, 362375], 'precision': 0.9852328663385082, 'sensitivity': 0.9901065449010654, 'no_links': 2641, 'F-score': 0.9876636933004366}\n",
      "Fold 4 {'no_false': 57, 'confusion_matrix': [2599, 28, 29, 362386], 'precision': 0.9893414541301865, 'sensitivity': 0.98896499238965, 'no_links': 2627, 'F-score': 0.9891531874405327}\n",
      "Fold 5 {'no_false': 59, 'confusion_matrix': [2602, 33, 26, 362381], 'precision': 0.9874762808349146, 'sensitivity': 0.9901065449010654, 'no_links': 2635, 'F-score': 0.9887896636899107}\n",
      "Fold 6 {'no_false': 60, 'confusion_matrix': [2601, 33, 27, 362381], 'precision': 0.9874715261958997, 'sensitivity': 0.9897260273972602, 'no_links': 2634, 'F-score': 0.9885974914481185}\n",
      "Fold 7 {'no_false': 70, 'confusion_matrix': [2603, 45, 25, 362369], 'precision': 0.9830060422960725, 'sensitivity': 0.9904870624048706, 'no_links': 2648, 'F-score': 0.986732373009856}\n",
      "Fold 8 {'no_false': 63, 'confusion_matrix': [2602, 37, 26, 362377], 'precision': 0.9859795377036756, 'sensitivity': 0.9901065449010654, 'no_links': 2639, 'F-score': 0.9880387317258401}\n",
      "Fold 9 {'no_false': 62, 'confusion_matrix': [2603, 37, 25, 362377], 'precision': 0.9859848484848485, 'sensitivity': 0.9904870624048706, 'no_links': 2640, 'F-score': 0.9882308276385725}\n",
      "nn bagging: {'no_false': 63, 'confusion_matrix': [2602, 37, 26, 362377], 'precision': 0.9859795377036756, 'sensitivity': 0.9901065449010654, 'no_links': 2639, 'F-score': 0.9880387317258401}\n",
      "\n",
      "lg per fold:\n",
      "Fold 0 {'no_false': 68, 'confusion_matrix': [2616, 56, 12, 362358], 'precision': 0.9790419161676647, 'sensitivity': 0.9954337899543378, 'no_links': 2672, 'F-score': 0.9871698113207547}\n",
      "Fold 1 {'no_false': 72, 'confusion_matrix': [2616, 60, 12, 362354], 'precision': 0.9775784753363229, 'sensitivity': 0.9954337899543378, 'no_links': 2676, 'F-score': 0.9864253393665159}\n",
      "Fold 2 {'no_false': 72, 'confusion_matrix': [2616, 60, 12, 362354], 'precision': 0.9775784753363229, 'sensitivity': 0.9954337899543378, 'no_links': 2676, 'F-score': 0.9864253393665159}\n",
      "Fold 3 {'no_false': 76, 'confusion_matrix': [2616, 64, 12, 362350], 'precision': 0.9761194029850746, 'sensitivity': 0.9954337899543378, 'no_links': 2680, 'F-score': 0.9856819894498868}\n",
      "Fold 4 {'no_false': 68, 'confusion_matrix': [2616, 56, 12, 362358], 'precision': 0.9790419161676647, 'sensitivity': 0.9954337899543378, 'no_links': 2672, 'F-score': 0.9871698113207547}\n",
      "Fold 5 {'no_false': 74, 'confusion_matrix': [2616, 62, 12, 362352], 'precision': 0.9768483943241225, 'sensitivity': 0.9954337899543378, 'no_links': 2678, 'F-score': 0.9860535243120995}\n",
      "Fold 6 {'no_false': 70, 'confusion_matrix': [2616, 58, 12, 362356], 'precision': 0.9783096484667165, 'sensitivity': 0.9954337899543378, 'no_links': 2674, 'F-score': 0.986797434930215}\n",
      "Fold 7 {'no_false': 74, 'confusion_matrix': [2616, 62, 12, 362352], 'precision': 0.9768483943241225, 'sensitivity': 0.9954337899543378, 'no_links': 2678, 'F-score': 0.9860535243120995}\n",
      "Fold 8 {'no_false': 74, 'confusion_matrix': [2616, 62, 12, 362352], 'precision': 0.9768483943241225, 'sensitivity': 0.9954337899543378, 'no_links': 2678, 'F-score': 0.9860535243120995}\n",
      "Fold 9 {'no_false': 74, 'confusion_matrix': [2616, 62, 12, 362352], 'precision': 0.9768483943241225, 'sensitivity': 0.9954337899543378, 'no_links': 2678, 'F-score': 0.9860535243120995}\n",
      "lg bagging: {'no_false': 72, 'confusion_matrix': [2616, 60, 12, 362354], 'precision': 0.9775784753363229, 'sensitivity': 0.9954337899543378, 'no_links': 2676, 'F-score': 0.9864253393665159}\n",
      "\n",
      "STACKING PERFORMANCE:\n",
      "\n",
      "{'no_false': 57, 'confusion_matrix': [2599, 28, 29, 362386], 'precision': 0.9893414541301865, 'sensitivity': 0.98896499238965, 'no_links': 2627, 'F-score': 0.9891531874405327}\n"
     ]
    }
   ],
   "source": [
    "## ENSEMBLE CLASSIFICATION AND EVALUATION\n",
    "\n",
    "print(\"BAGGING PERFORMANCE:\\n\")\n",
    "modeltypes = ['svm', 'nn', 'lg'] \n",
    "modeltypes_2 = ['rbf', 'relu', 'l2']\n",
    "modelparams = [0.001, 2000, 0.005]\n",
    "nFold = 10\n",
    "kf = KFold(n_splits=nFold)\n",
    "model_raw_score = [0]*3\n",
    "model_binary_score = [0]*3\n",
    "model_i = 0\n",
    "for model_i in range(3):\n",
    "    modeltype = modeltypes[model_i]\n",
    "    modeltype_2 = modeltypes_2[model_i]\n",
    "    modelparam = modelparams[model_i]\n",
    "    print(modeltype, \"per fold:\")\n",
    "    iFold = 0\n",
    "    result_fold = [0]*nFold\n",
    "    final_eval_fold = [0]*nFold\n",
    "    for train_index, valid_index in kf.split(X_train):\n",
    "        X_train_fold = X_train[train_index]\n",
    "        y_train_fold = y_train[train_index]\n",
    "        md =  train_model(modeltype, modelparam, X_train_fold, y_train_fold, modeltype_2)\n",
    "        result_fold[iFold] = classify(md, X_test)\n",
    "        final_eval_fold[iFold] = evaluation(y_test, result_fold[iFold])\n",
    "        print(\"Fold\", str(iFold), final_eval_fold[iFold])\n",
    "        iFold = iFold + 1\n",
    "    bagging_raw_score = np.average(result_fold, axis=0)\n",
    "    bagging_binary_score  = np.copy(bagging_raw_score)\n",
    "    bagging_binary_score[bagging_binary_score > 0.5] = 1\n",
    "    bagging_binary_score[bagging_binary_score <= 0.5] = 0\n",
    "    bagging_eval = evaluation(y_test, bagging_binary_score)\n",
    "    print(modeltype, \"bagging:\", bagging_eval)\n",
    "    print('')\n",
    "    model_raw_score[model_i] = bagging_raw_score\n",
    "    model_binary_score[model_i] = bagging_binary_score\n",
    "    \n",
    "thres = .99\n",
    "print(\"STACKING PERFORMANCE:\\n\")\n",
    "stack_raw_score = np.average(model_raw_score, axis=0)\n",
    "stack_binary_score = np.copy(stack_raw_score)\n",
    "stack_binary_score[stack_binary_score > thres] = 1\n",
    "stack_binary_score[stack_binary_score <= thres] = 0\n",
    "stacking_eval = evaluation(y_test, stack_binary_score)\n",
    "print(stacking_eval)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
